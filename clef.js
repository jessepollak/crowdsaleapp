var express = require('express');
var stormpath = require('express-stormpath');
router = express.Router();
var http = require('http')
var path = require('path')
var request = require('request')
var crypto = require('crypto')
var csrf = require('csurf');
//var nodestormpath = require('stormpath');

var APP_ID = process.env.CLEFID,
    APP_SECRET = process.env.CLEFSECRET;


function getTime() {
  return (new Date()).getTime()
}

function generateUsername(clefID) {
  return "__clef_" + clefID
}

function generatePassword() {
  var base = Math.random().toString(36).slice(2) + Math.random().toString(36).slice(2)
  base += base[0].toUpperCase()
  return base
}

function stormpathLoginReg(first, last, email, clefID, req, res) {
  // also, if already have acc. / already exists when trying to create or auth. let the user know
  getAccount({ email: email, clefID: clefID }, req, function(account) {
    if (account) {
      authenticate(account, req, res);
    } else {
      var account = {
        givenName: first,
        surname: last,
        // we use username to store the clefID because it is the only
        // unused property that is searchable in Stormpath.
        //
        // See this StackOverflow answer by their CTO:
        //
        // http://stackoverflow.com/questions/28136157/how-to-search-for-users-by-id-and-customdata-in-stormpath
        //
        username: generateUsername(clefID),
        email: email,
        password: generatePassword(),
      }

      // make new acc then login
      createAccount(account, email, clefID, req, res);
    }
  });
}

function createAccount(account, email, clefID, req, res) {
  req.app
    .get('stormpathApplication')
    .createAccount(account, function(err, account) {
      if (err) console.log(err);
      return authenticate(account, req, res);
    }
  );
}

function getAccount(data, req, callback) {
  req.app
    .get('stormpathApplication')
    .getAccounts({username: generateUsername(data.clefID)}, function(err, accounts) {
      if (err) console.log(err);

      // if there is a user with the username matching the clefID, return
      // that user
      if(accounts.items.length > 0) {
        callback(accounts.items[0])
      } else if (data.email) {
        req.app
          .get('stormpathApplication')
          .getAccounts({email: data.email}, function(err, accounts) {
            if (err) console.log(err)

            // if there is a user with the email matching, return that user
            if (accounts.items.length > 0) {
              var account = accounts.items[0]
              account.username = generateUsername(data.clefID)
              account.save(function() {
                callback(account)
              })
            } else {
              // if there isn't a user with matching middleName or email,
              // return no user
              callback()
            }
          })
      } else {
        callback()
      }
  });

}

function authenticate(account, req, res) {
    res.locals.user = account;
    req.app.user = account;
    req.app.get('stormpathApplication').user = account;
    req.stormpathSession.user = account.href;
    req.stormpathSession.loggedInAt = getTime()

    var url = req.query.next || req.app.get('stormpathRedirectUrl');
    res.redirect(302, url);
}



function checkToken(token, secret) {
  if ('string' != typeof token) return false;
  return token === createToken(token.slice(0, 10), secret);
}

function createToken(salt, secret) {
  return salt + crypto
    .createHash('sha1')
    .update(salt + secret)
    .digest('base64');
}

/**
 * Does an OAuth handshake with Clef to get user information.
 *
 * This route is redirected to automatically by the browser when a user
 * logs in with Clef.
 *
 * For more info, see http://docs.getclef.com/v1.0/docs/authenticating-users
 */
router.get('/', function(req, res) {
  // If the state parameter doesn't match what we passed into the Clef button,
  // then this request could have been generated by a 3rd party, so we should
  // abort it.
  //
  // For more protection about the state parameter and CSRF, check out
  // http://docs.getclef.com/v1.0/docs/verifying-state-parameter
  //var state = req.param('state');
  //if (!stateParameterIsValid(req.session, state)) {
  //    return res.status(403).send("Oops, the state parameter didn't match what was passed in to the Clef button.");
  //}
  var user = req.user;
  var code = req.param('code');
  var state = req.param('state');

  //console.log(state.toString());

  if (!checkToken(state, process.env.CSRFSALT)) {
      return res.status(403).send("Oops, the state parameter didn't match what was passed in to the Clef button.");
  }


  var authorizeURL = 'https://clef.io/api/v1/authorize';
  var infoURL = 'https://clef.io/api/v1/info';
  var form = {
    app_id: APP_ID,
    app_secret: APP_SECRET,
    code: code
  };

  request.post({url: authorizeURL, form: form}, function(error, response, body) {
    var token = JSON.parse(body)['access_token'];
    request.get({url: infoURL, qs: {access_token: token}},
      function(error, response, body) {
        var userData = JSON.parse(body)['info'];
        if(userData) {
          var userID = userData.id;
          var email = userData.email;
          var first = userData.first_name;
          var last = userData.last_name;
          if(!last) {
            last = 'none'
          }
          // get stormpath acc. or make a new one and set email to clef email and pass to clefID
          stormpathLoginReg(first, last, email, userID, req, res);
        }
        else {
          res.redirect('/clef');
          console.log('redirecting');
        }
      });
  });
});

/**
 * Handles logout hook requests sent by Clef when a user logs out on their phone.
 *
 * This method looks up a user by their `clefID` and updates the database to
 * indicate that they've logged out.
 *
 * For more info, see http://docs.getclef.com/v1.0/docs/database-logout
 */
 // this path is /clef/logout
router.post('/logout', function(req, res) {
  var token = req.param('logout_token');
  var logoutURL = 'https://clef.io/api/v1/logout';
  var form = {
    app_id: APP_ID,
    app_secret: APP_SECRET,
    logout_token: token
  };

  request.post({url: logoutURL, form:form}, function(err, response, body) {
    var response = JSON.parse(body);
    if (response.success) {
      getAccount({ clefID: response.clef_id }, req, function(account) {
        if (account) {
          account.customData.loggedOutAt = (new Date()).getTime()
          account.save()

          res.status(200).send()
        } else {
          res.status(500).send({ error: 'No user' })
        }
      })
    } else {
      res.status(500).send({ error: response.error })
    }
  });
});


/**
*
* This middleware checks whether a user is logged out with Clef and if they
* are it logs them out of the application.
*
**/
var clefLogoutMiddleware = function(req, res, next) {
  if (req.user) {
    if (req.user.customData.loggedOutAt && req.stormpathSession.loggedInAt && req.stormpathSession.loggedInAt < req.user.customData.loggedOutAt) {
      req.stormpathSession.destroy()
      res.redirect('/')
    }
  }
  next()
}

function registerExpressApplication(app) {
  app.use(clefLogoutMiddleware)
  app.use('/clef', router)
}

module.exports = registerExpressApplication